#!/bin/bash

set -e

CLIENT_CERTS_DIR=<%= p('driver_path') %>/certs/smbdriver
SERVER_CERTS_DIR=/var/vcap/jobs/smbdriver/config/certs
RUN_DIR=/var/vcap/sys/run/smbdriver
LOG_DIR=/var/vcap/sys/log/smbdriver
PIDFILE=$RUN_DIR/smbdriver.pid

SCRIPT=$(basename $0)
mkdir -p /var/vcap/sys/log/monit

exec 1>> /var/vcap/sys/log/monit/$SCRIPT.log
exec 2>> /var/vcap/sys/log/monit/$SCRIPT.err.log

echo "[$(date  +%Y-%m-%dT%H:%M:%S.%NZ)] ------------ `basename $0` $* --------------" | tee /dev/stderr

case $1 in
  start)
    mkdir -p $RUN_DIR
    chown -R vcap:vcap $RUN_DIR

    mkdir -p $LOG_DIR
    chown -R vcap:vcap $LOG_DIR

    mkdir -p /var/vcap/data/voldrivers
    chmod 777 /var/vcap/data/voldrivers

    mkdir -p "<%= p("cell_mount_path") %>"
    chown vcap:vcap "<%= p("cell_mount_path") %>"

    echo $$ > $PIDFILE

    # Allowed number of open file descriptors
    ulimit -n 100000

    export LD_LIBRARY_PATH=/usr/local/lib:/var/vcap/packages/keyutils/keyutils/:$LD_LIBRARY_PATH
    export PATH=/usr/local/bin:/var/vcap/packages/keyutils/keyutils/:$PATH
    
    ENABLE_INSECURE_SKIP_VERIFY=""
    <% if p("ssl.insecure_skip_verify") %>
    ENABLE_INSECURE_SKIP_VERIFY="--insecureSkipVerify"
    <% end %>

    exec chpst -u root:root /var/vcap/packages/smbdriver/bin/smbdriver \
      --listenPort=<%= p("listen_port") %> \
      --transport="tcp-json" \
      --forceNoserverino=<%= p("force_noserverino") %> \
      <% if p("tls.ca_cert") != '' %>\
      --requireSSL \
      --certFile="${SERVER_CERTS_DIR}/server.crt" \
      --keyFile="${SERVER_CERTS_DIR}/server.key" \
      --caFile="${CLIENT_CERTS_DIR}/ca.crt" \
      --clientCertFile="${CLIENT_CERTS_DIR}/client.crt" \
      --clientKeyFile="${CLIENT_CERTS_DIR}/client.key" \
      ${ENABLE_INSECURE_SKIP_VERIFY} \
      <% end %>\
      --debugAddr="<%= p("debug_addr") %>" \
      --driversPath="<%= p("driver_path") %>" \
      --mountDir="<%= p("cell_mount_path") %>" \
      --logLevel="<%= p("log_level") %>" \
      --timeFormat="<%= p("log_time_format") %>" \
      >> $LOG_DIR/smbdriver.stdout.log \
      2>> $LOG_DIR/smbdriver.stderr.log
    ;;

  stop)
    if [ -f $PIDFILE ]; then
      kill -9 `cat $PIDFILE` || true
      rm -f $PIDFILE
    fi
    rm -f "<%= p("driver_path") %>"/smbdriver.json
    ;;

  *)
    echo "Usage: smbdriver_ctl {start|stop}"
    ;;
esac
