#!/bin/bash -eu

export PATH="/var/vcap/packages/cf-cli-8-linux/bin:${PATH}"

export CF_HOME=/var/vcap/data/smbbrokerpush_$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 6 | head -n 1)/
export CF_DIAL_TIMEOUT=<%= p('cf.dial_timeout') %>

export CF_BROKER_USERNAME="<%= p('username') %>"
export CF_BROKER_PASSWORD="<%= p('password') %>"

SCHEME=https
DOMAIN=<%= p('domain') %>
API_ENDPOINT=$SCHEME://api.$DOMAIN
ORG=<%= p('organization') %>
SPACE=<%= p('space') %>
APP_NAME=<%= p('app_name') %>
SERVICE_BROKER_NAME=<%= p('broker_name') %>
SERVICES_CONFIG=/var/vcap/jobs/smbbrokerpush/config/services.json
SYSLOG_URL="<%= p('syslog_url') %>"
MANIFEST=/var/vcap/jobs/smbbrokerpush/manifest.yml
PROCFILE=/var/vcap/jobs/smbbrokerpush/Procfile
STARTUP_SCRIPT=/var/vcap/jobs/smbbrokerpush/start.sh
CREDHUB_CA_CERT=/var/vcap/jobs/smbbrokerpush/credhub_ca.crt
APP_URL=$SCHEME://$APP_NAME.$DOMAIN

ERROR_EXIT_CODE=<%= p('error_on_misconfiguration') ? 1 : 0 %>
DEPLOYMENT_STATUS=0

function authenticate_and_target() {
  mkdir -p $CF_HOME
  cf api $API_ENDPOINT <% if p('skip_cert_verify') %>--skip-ssl-validation<% end %>
  <% if_p('cf.client_id', 'cf.client_secret') do |client_id, client_secret| %>
    echo "Found a client ID. Authenticating cf as <%= client_id %>"
    # On 2023-03-27 we discovered that new stemcells were using OS audit tools to
    # log every command run on a VM. This was causing CF authentication commands
    # of the form `cf auth --client-credentials USERNAME PASSWORD` to be logged
    # in plaintext to syslog.
    #
    # Internal shell commands like setting variables are not logged by OS audit
    # tools, so we changed our auth from passing a password as an argument to
    # passing a password as an environment variable
    export CF_USERNAME="<%= client_id %>"
    export CF_PASSWORD="<%= client_secret %>"
    cf auth --client-credentials
  <% end.else do %>
    echo "No client ID found. Authenticating cf as <%= p('cf.admin_user') %>"
    export CF_USERNAME="<%= p('cf.admin_user') %>"
    export CF_PASSWORD="<%= p('cf.admin_password') %>"
    cf auth
  <% end %>
  cf create-org $ORG
  cf target -o $ORG
  cf create-space $SPACE
  cf target -s $SPACE
}

function create_credhub_security_group() {
  cf create-security-group credhub_open /var/vcap/jobs/smbbrokerpush/credhub.json
  cf update-security-group credhub_open /var/vcap/jobs/smbbrokerpush/credhub.json
  if LANG=en cf version | grep "cf version 6" ; then
    cf bind-security-group credhub_open $ORG $SPACE
  else
    cf bind-security-group credhub_open $ORG --space $SPACE
  fi
}

function create_manifest() {
  cat $MANIFEST | sed 's/PASSWORD: "[^"]*"/PASSWORD: ****/g'
  cp -f $MANIFEST /var/vcap/packages/smbbroker/manifest.yml
  cp -f $PROCFILE /var/vcap/packages/smbbroker/Procfile
  cp -f $STARTUP_SCRIPT /var/vcap/packages/smbbroker/start.sh
  chmod +x /var/vcap/packages/smbbroker/start.sh
  cp -f $SERVICES_CONFIG /var/vcap/packages/smbbroker/services.json
<% if_p('credhub.ca_cert') do |_| %>
  cp -f $CREDHUB_CA_CERT /var/vcap/packages/smbbroker/credhub_ca.crt
<% end %>

}

function create_logging_service() {
  local LOGGER_NAME=$APP_NAME-logger
  set +e
    cf service $LOGGER_NAME --guid
    local exit_code=$?
  set -e

  if [[ -z "$SYSLOG_URL" ]]; then
    echo "Syslog URL is not set."

    if [[ $exit_code -eq 0 ]]; then
      cf unbind-service $APP_NAME $LOGGER_NAME
      cf delete-service $LOGGER_NAME -f
    fi

    return
  fi

  if [[ $exit_code -ne 0 ]]; then
    cf create-user-provided-service $LOGGER_NAME -l $SYSLOG_URL
  else
    cf update-user-provided-service $LOGGER_NAME -l $SYSLOG_URL
  fi

  cf bind-service $APP_NAME $LOGGER_NAME
}

function push_app() {
  local exit_code

  mkdir -p /var/vcap/data/tmp
  export TMPDIR=/var/vcap/data/tmp
  # Find the latest available cflinux stack to ensure that the broker runs with the latest available stack. We could do a more complicated implementation that tries to lookup the default stack and use that, but as of 24-07-2023 I haven't seen a good reason to do so. This way, we will just always use the latest available stack to push the app and not rely on more complicated lookups via cf curl. Previously this would rely on using the default stack but that only works for new apps. If an app was already pushed with cflinuxfs3 it wouldn't pick up cflinuxfs4 even if that is the default stack. The buildpack (and assigned stack) ordering does NOT affect that either, the stack will be sticky..
  LATEST_STACK=$( cf stacks | grep linux | cut -f1 -d' ' | sort -u | tail -1 )
  pushd /var/vcap/packages/smbbroker > /dev/null
    set +e
    REDACT_ENV=""
    if cf push --help | grep -- '--redact-env'; then
      REDACT_ENV="--redact-env"
    fi
    cf push "${APP_NAME}" -i 1 -s ${LATEST_STACK} ${REDACT_ENV}

    exit_code=$?
    set -e

    if [[ $exit_code -ne 0 ]]; then
      cf logs "${APP_NAME}" --recent
      exit "${exit_code}"
    fi
  popd > /dev/null
}

function register_service() {
  # We want to avoid providing creds as commandline params to binaries to avoid leaking creds via auditd logs. Set the CF_BROKER_PASSWORD instead.
  cf create-service-broker $SERVICE_BROKER_NAME $CF_BROKER_USERNAME $APP_URL || cf update-service-broker $SERVICE_BROKER_NAME $CF_BROKER_USERNAME $APP_URL
}

function clean_up() {
  cf logout
  rm -rf $CF_HOME
}

function print_deployment_status() {
  if [[ $DEPLOYMENT_STATUS != 0 ]]; then
    echo "Deployment failed!"
    exit 1
  fi

  echo "Deployment succeeded!"
}

cf -v

authenticate_and_target
create_manifest
<% if p('credhub.create_security_group') %>
  create_credhub_security_group
<% end %>
push_app
create_logging_service
<% if p('register_broker') %>
  register_service
<% end %>
clean_up
print_deployment_status
